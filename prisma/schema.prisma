// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//Todo: en un futuro, crear el modelo de usuario y la relacion con el store(1 usuario puede tener mas de 1 store)

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación uno-a-muchos: Un usuario puede tener muchas tiendas
  stores Store[]
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("storeToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Campo de relación para asociar la tienda con un usuario
  user User @relation(fields: [userId], references: [id])

  @@index([userId]) // Índice para optimizar búsquedas por userId
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
  @@index([billboardId]) // Índice para optimizar búsquedas por billboardId
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  images     Image[]
  orders     OrderItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
  @@index([categoryId]) // Índice para optimizar búsquedas por categoryId
  @@index([sizeId]) // Índice para optimizar búsquedas por sizeId
  @@index([colorId]) // Índice para optimizar búsquedas por colorId
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId]) // Índice para optimizar búsquedas por productId
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("storeToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId]) // Índice para optimizar búsquedas por storeId
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  order    Order   @relation(fields: [orderId], references: [id])
  productId String
  product  Product @relation(fields: [productId], references: [id])

  @@index([orderId]) // Índice para optimizar búsquedas por orderId
  @@index([productId]) // Índice para optimizar búsquedas por productId
}
